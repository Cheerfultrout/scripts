``set(sense-graph-length 10
   sense-graph-min 40
   sense-graph-level-factor 1.6
   sense-graph-determine-level
      lambda(arguments(d &opt(cur-level 1) &opt(cur-val sense-graph-min))
          if(=(d 0) 0
          if(<(d 0) -(sense-graph-determine-level(-(d)))
          if(<(d cur-val) cur-level
          sense-graph-determine-level(d +(1 cur-level) *(sense-graph-level-factor cur-val)))
          ))
      )
   sense-graph-args
      lambda(arguments(d level)
      def(level-maxval level-minval len-used)
      if(<(level 0) sense-graph-args(-(d) -(level))
         set(level-maxval int(+(
                          *(sense-graph-min **(sense-graph-level-factor -(level 1))))))
         set(level-minval int(+(if(>(level 1)
                          *(sense-graph-min **(sense-graph-level-factor -(level 2))) 0))))
         set(len-used int(*(sense-graph-length /( -(d level-minval) -(level-maxval level-minval) ))))
         say({sense: }d{ min: }level-minval{ max: }level-maxval{ used: }len-used)

         list(level-maxval len-used level-minval)
      )
      )
   sense-graph
      lambda(def(d cur-sense zero-point len-used level level-maxval level-minval level-args)
      set(zero-point conf({levels::sense::3}))
      set(d sense)
      set(cur-sense -(d zero-point))
      set(level sense-graph-determine-level(cur-sense))
      if(<(level 0) progn(
         set(level-args sense-graph-args(cur-sense level)
             level-maxval xth(level-args 0)
             len-used xth(level-args 1))
         .({[} x({_} -(sense-graph-length len-used)) if(>(len-used 0) {<}) x({-} -(len-used 1) ) {] \n} d { / } +(-(level-maxval) zero-point) { Lv.} level))
     if(=(level 0) progn(
         .({[} x({_} sense-graph-length) {]} { Lv.0}))
         set(level-args sense-graph-args(cur-sense level)
             level-maxval xth(level-args 0)
             len-used xth(level-args 1))
         .({[} x({=} -(len-used 1)) if(>(len-used 0){>}) x({_} -(sense-graph-length len-used)) {] \n} d { / } +(level-maxval zero-point) { Lv.} level))
         )))''
