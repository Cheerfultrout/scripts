#!/usr/bin/env perl
# 本来这个脚本来自eexpress的
# 但是我现在找不到它了
# 原来该是从http://git.ubuntu.org.cn 看到的
# 但是它现在根本看不见了

use Getopt::Long qw/:config gnu_getopt/;
use File::Basename;
use 5.012;
use Scripts::scriptFunctions;
use Scripts::EnvConf;
use utf8;
use Encode qw/_utf8_on _utf8_off/;

my (@files, @regex);
my $help = 0;
my $showVersion = 0;
#print ((fileparse $0)[0]);
my $commonGrep = ((fileparse $0)[0] ~~ qw/cg gg gc/) ? 1 : 0; #根据文件名判断
#print $commonGrep;
my $ln = 0;
my $fn = 'DEFAULT';
my $removeComment = 0;
my $commentStart = '#';
my $showColor = 1;
my $ignoreCase = 0;
my $fixed = 0;
my $invent = 0;

GetOptions (
    'help' => \$help,
    'version' => \$showVersion,
    'common-grep|g' => \$commonGrep,
    'no-common-grep|G' => sub { $commonGrep = 0 },
    'file|f' => sub { @files = multiArgs },
    'end' => sub {}, #对于-f等多参数的结束
    'line-number|l' => \$ln,
    'no-line-number|L' => sub { $ln = 0 }, # default
    'show-filename|n'=> \$fn,
    'no-filename|N'=> sub { $fn = 0 },
    'remove-comment|c' => \$removeComment,
    'comment-startswith|s=s' => \$commentStart,
    'color' => \$showColor,
    'no-color|C' => sub { $showColor = 0 },
    'ignore-case|i' => \$ignoreCase,
    'no-ignore-case|I' => sub { $ignoreCase = 0 },
    'fixed|F' => \$fixed,
    'no-fixed|r' => sub { $fixed = 0 },
    'v|invent' => \$invent,
    'V|no-invent' => sub { $invent = 0 },
);

my $scriptName = 'grep.perl';
my $version = '0.1';
my $rCommentRegex = qr/^(?!\s*(?:${commentStart}))/;
if ($help) {
    say
qq{$scriptName $version, 简写 g.
用法:
    g [opts] [regex] ... -f file ...
    g [opts] -g regex [file ...] # (like common grep)
    gc 或cg 或 gg 等同于 g -g
    -f 后边的所有参数都被视作文件名.
选项:
    --help                      就是这个帮助信息
    --version                   打印 $scriptName 的版本
    -l, --line-number           显示行号
    -L, --no-line-number        (默认的)不显示行号
    -n, --show-filename         显示文件名:如果有多个文件,默认会这么做的
    -N, --no-filename           不显示文件名(联系上边的看吧.)
    --end                       结束多参数选项(如：-f)
    -c, --remove-comment        去除行首注释
    -s, --comment-startswith='' 设置注释以什么开头(默认是'#')
高级玩法
    g -lnf files ... # 连接这些文件并显示文件名和行号
                     # 不是cgrep模式的话，正则可以省略的。
};
    exit 0;
}

if ($showVersion) {
    say qq{$scriptName version $version};
    exit 0;
}
#@files = split (/,/,join (',',@files));
if (! -t STDIN and ! $commonGrep) {
    # pipe
    @regex = @ARGV;
    @files = (@files ? @files : '-');
} elsif ($commonGrep) {
    @regex = (shift @ARGV or die "没有指定正则表达式\n"); # cgrep只允许一个正则
    @files = (@ARGV, @files);
    #这个功能实在鸡肋..cgrep不需要-f的
    @files = (@files ? @files : '-'); # 哪个放在前边好？？
} elsif (! @files) {
    @regex = @ARGV;
    @files = ('-');
} else {
    @regex = @ARGV;
}

if ($fn eq 'DEFAULT') { # 如果没有特别指定显示文件名
    $fn = @files - 1;
}

if ($removeComment) { # eexpress https://github.com/eexpress/eexp-bin/blob/master/config/.bash/alias
# ▶ dog
# alias dog='grep -v -E "(^$|^#|^!)"'
    unshift @regex, $rCommentRegex;
}

if ($fixed) {
    @regex = map quotemeta $_, @regex;
}
if ($ignoreCase) {
    @regex = map qr/$_/i, @regex;
} else {
    @regex = map qr/$_/, @regex;
}
my @col;
my $nocol;
my $filenameColor;
my $lineNumColor;
if ($showColor) {
    my $gColors = Scripts::EnvConf->new ($ENV{G_COLORS});
    $filenameColor = $gColors->{fn} ? "\e[".($gColors->{fn})."m" : "\e[33m";
    $lineNumColor = $gColors->{ln} ? "\e[".($gColors->{ln})."m" : "\e[32m";
    # 这不科学！为什么用`\t'作正则匹配的时候，显示的颜色会不一样呢?!!!
    @col = map "\e[1;4;3".(int rand(6) +1).';40m', @regex;
    # 在终端里边，选中了一下，再取消选择，发现居然正常了
    # 是不是urxvt的问题呢？
    # xterm, mate-terminal 都显不出\e[4m的下划线。操。
    #say "$col[0]\t\e[0m" for 1..10;
    $nocol = "\e[0m";
}
no strict 'refs';
for my $file (@files) {
    my $fh = $file;
    if ($file eq '-' #or $file eq '/dev/stdin' #不再特殊处理这些。只保留-
        #or $file eq '/proc/self/fd/0' # 等等高级写法...
       ) {
        $fh = 'STDIN'; # \*STDIN => GLOB(0x1bb76a8)
        $file = "(Standard Input)";
    } else {
        if (!open $fh, '<', $fh) {
            say STDERR "Cannot open `$file': $!";
            next;
        }
        # ● gc [ ~/.conkyrc  
        # Unmatched [ in regex; marked by <-- HERE in m/([ <-- HERE )/ at /home/tusooa/应用/脚本/gc line 140, </home/tusooa/.conkyrc> line 1.

    }
    # 以下几行注释的内容，是eexpress之原始代码。
    #for my $i (@regex)
    #{
    #    @_ = grep /$i/, @_;
    #}
    #$_ = join "",@_;
    # 如果原来就有颜色呢？去掉。
    #s/\e\[[0-9;]*[mK]//g;
    LINE:
    while (<$fh>) {
        _utf8_on ($_); #修复了用/./来匹配，会造成乱码的错误
        for my $i (0..$#regex) {
            $regex[$i] or next; #解决了如下bug:
            # ● git diff G -lnf /dev/stdin --end '' #嗯，准确说是 g ''。当regex为空时的问题。

            #print STDERR $regex[$i];
            if ($invent) {
                /$regex[$i]/ and next LINE;
            } else {
                s{($regex[$i])}{$col[$i]$1$nocol}g or next LINE;
            }
            #say $i;
        }
        _utf8_off ($_);
        print "${filenameColor}${file}:$nocol" if $fn;
        # 行号,具体参见 ● perldoc -v '$.'
        print "${lineNumColor}${.}:$nocol" if $ln;
        print;
    }
}
#● g -clns'#|$' -f g |wc -l
#128


